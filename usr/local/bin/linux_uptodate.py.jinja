#!/usr/bin/env python

import subprocess
import smtplib
from smtplib import SMTPException
from email.mime.text import MIMEText
import socket

PACKAGE_WHITELIST = []
DESTINATION_EMAILS = ["{{ pillar['consumeraffairs_software_update_notify'] }}"]



def send_info(info_string):
    mail_body = "Hi! Here is your info about available Linux updates: \n\n%s"\
        % info_string
    msg = MIMEText(mail_body)
    msg['Subject'] = 'Linux updates available at %s' % socket.gethostname()
    msg['From'] = 'Up-to-date Script <no-reply@consummeraffairs.com>'
    msg['To'] = ', '.join(DESTINATION_EMAILS) 
    
    sender = 'no-reply@consummeraffairs.com'
    receivers = DESTINATION_EMAILS

    try:
        smtp_obj = smtplib.SMTP('localhost')
        smtp_obj.sendmail(sender, receivers, msg.as_string())    
        smtp_obj.quit()
        return True
    except SMTPException, e:
        print e
        return False
    
def get_available_packages():

    # First Command:
    #   apt-get -q -y --ignore-hold --allow-unauthenticated -s dist-upgrade
    p1 = subprocess.Popen(
        [
        '/usr/bin/apt-get', '-q', '-y', '--ignore-hold', '--allow-unauthenticated',
        '-s', 'dist-upgrade',
        ],
        stdout=subprocess.PIPE
        )

#    p1 = subprocess.Popen(
#        [
#        '/bin/cat', './dummy_output.txt',
#        ],
#        stdout=subprocess.PIPE
#        )

    # Second Command:
    #   grep ^Inst
    p2 = subprocess.Popen(
        ['/bin/grep', '^Inst'],
        stdin=p1.stdout,
        stdout=subprocess.PIPE
        )

    # Third Command:
    #   cut -d\ -f2
    p3 = subprocess.Popen(
        ['/usr/bin/cut', '-d ', '-f2'],
        stdin=p2.stdout,
        stderr=None,
        stdout=subprocess.PIPE
        )

    # make sure we close the output so p2 doesn't hang waiting for more input
    p1.stdout.close() 
    p2.stdout.close()

    # run our commands
    cmd_output = p3.communicate()[0]
    
    if cmd_output.strip() == '':
        return False
    else:
        return cmd_output
 
available_updates = get_available_packages()

if available_updates is not False:
    if not send_info(available_updates):
        print "Cannot send email!"
    else:
        print "Email succesfully sent to %s" % DESTINATION_EMAILS    