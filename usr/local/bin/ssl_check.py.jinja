#!/usr/bin/env python

import re
import smtplib
from smtplib import SMTPException
from email.mime.text import MIMEText
import time
from BeautifulSoup import BeautifulSoup
import requests

RATING_URL = "https://www.ssllabs.com/ssltest/analyze.html?d=consumeraffairs.com"
CLEAR_URL = "https://www.ssllabs.com/ssltest/clearCache.html?d=consumeraffairs.com"
GOOD_SCORES = ['A','A-']
DESTINATION_EMAILS = ["{{ pillar['nagios']['update_notify_email'] }}"]
SLEEP_TIME = 10

   
def read_score(html):
    soup = BeautifulSoup(html)
    divs = soup.findAll('div', {"class" : "rating_a"})
    return divs[0].text
    
    
def check_refresh_page(html):
    regex = re.compile("refresh_page")
    match = regex.search(html)
    if match:
        return True
    else:
        return False
    
    
def get_score():
    try:
        # Clear SSL Lab's cache
        requests.get(CLEAR_URL)
        
        # Trigger analysis
        refresh_page = True
        while refresh_page:
            time.sleep(SLEEP_TIME)
            r2 = requests.get(RATING_URL)
            html_page = r2.text
            refresh_page = check_refresh_page(html_page)
            
        score = read_score(html_page)
        return score
    except Exception, e:
        print e
    

def send_info(info_string):
    mail_body = info_string
    msg = MIMEText(mail_body)
    msg['Subject'] = 'SSL Rating by SSL Labs'
    msg['From'] = 'SSL Check Script <no-reply@consummeraffairs.com>'
    msg['To'] = ', '.join(DESTINATION_EMAILS) 
    
    sender = 'no-reply@consummeraffairs.com'
    receivers = DESTINATION_EMAILS

    try:
        smtp_obj = smtplib.SMTP('localhost')
        smtp_obj.sendmail(sender, receivers, msg.as_string())    
        smtp_obj.quit()
        return True
    except SMTPException, e:
        print e
    
# Get rating
score = get_score()


# Build info to mail
info = ""
if not score:
    info = "There was a problem getting the SSL rating at SSL Labs.\
            Please visit {}.".format(RATING_URL)
elif score not in GOOD_SCORES:
    info = "SSL Labs says we are not scoring well [{}].\
            Please visit: {}.".format(score, RATING_URL)

# Send email if there's something to say
if info != "":
    if not send_info(info):
        print "Cannot send email!"
    else:
        print "Email succesfully sent to {}".format(DESTINATION_EMAILS)   



