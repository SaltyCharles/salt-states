#!/bin/sh
HOSTNAME=`hostname`
NOW=`date '+%Y-%m-%d-%H-%M'`
LOG="/var/backups/database/${HOSTNAME}_${NOW}.log"
BACKUP_DIR="/var/backups/database"
DB_FINAL="${BACKUP_DIR}/${HOSTNAME}_${NOW}.sql.gz"
echo "Started at `date`" > $LOG
{%- set backup = pillar.get('percona', {}).get('backup', {}) %}
{%- set user = backup.get('db_user', 'backup') %}
{%- set password = backup.get('password', 'SET_PASSWORD_IN_PILLAR') %}
{%- set gpg_key = backup.get('backup_gpg_key', 'insecure_gpg_key') %}
{%- set s3_bucket = backup.get('s3_bucket', 'backups') %}

/var/backups/bin/stop_replication >> $LOG
echo "Replication status is now:" >> $LOG
/var/backups/bin/replica_status >> $LOG
echo "Starting full dump..." >> $LOG
DB_TMP=`mktemp /tmp/full_backup_XXXXXXXXXX` || exit 1
mysqldump -u {{user}} -p{{password}} --all-databases --events --ignore-table=mysql.events | gzip > $DB_TMP
mv $DB_TMP $DB_FINAL
chown --quiet backup:backup $DB_FINAL
chmod --quiet 664 $DB_FINAL

{% for db in backup.get('databases', []) %}
DB_TMP=`mktemp /tmp/{{db}}_backup_XXXXXXXXXX` || exit 1
DB_FINAL="${BACKUP_DIR}/${HOSTNAME}_{{db}}_latest.sql.gz"
echo "Starting {{db}} dump..." >> $LOG
mysqldump -u {{user}} -p{{password}} {{db}} | gzip > $DB_TMP
mv $DB_TMP $DB_FINAL
chown --quiet backup:backup $DB_FINAL
chmod --quiet 664 $DB_FINAL
{% endfor %}

echo "Dump complete." >> $LOG
/var/backups/bin/start_replication >> $LOG

ENCRYPT_TMP="/tmp/${HOSTNAME}_${NOW}.sql.gz.gpg"
gpg -c --passphrase "{{gpg_key}}" -o $ENCRYPT_TMP $DB_FINAL &>> $LOG
/usr/local/bin/aws s3 cp $ENCRYPT_TMP s3://{{s3_bucket}} >> $LOG
rm $ENCRYPT_TMP

echo "Cleaning up backups..." >> $LOG
/var/backups/bin/clean_backups >> $LOG
echo "Stopped at `date`" >> $LOG
chown --quiet backup:backup $LOG
chmod --quiet 664 $LOG

/usr/local/bin/aws s3 cp $LOG s3://{{s3_bucket}} >> $LOG
